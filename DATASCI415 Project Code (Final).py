# -*- coding: utf-8 -*-
"""datasci 415 FINAL PROJECT (new)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OR1NTfhVk0C89iRp0eGHyitD5OogO97x
"""

!pip install ta

import yfinance as yf
import pandas as pd
import ta
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.tsa.stattools import adfuller
from sklearn.preprocessing import MinMaxScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.svm import SVR
from sklearn.model_selection import TimeSeriesSplit
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
import matplotlib.dates as mdates
import warnings

warnings.filterwarnings("ignore", category=UserWarning)
warnings.filterwarnings("ignore", category=FutureWarning)

# nvidia data

nvidia = yf.download('NVDA', start = '2023-01-01', end = '2023-12-31',
                     interval = "1d")
nvidia.index = pd.to_datetime(nvidia.index)
nvidia = nvidia.dropna()

close = nvidia["Close"].squeeze()
high = nvidia["High"].squeeze()
low = nvidia["Low"].squeeze()
volume = nvidia["Volume"].squeeze()

obv = ta.volume.OnBalanceVolumeIndicator(close = close, volume = volume)
nvidia["OBV"] = obv.on_balance_volume()

ad = ta.volume.AccDistIndexIndicator(high = high, low = low, close = close,
                                     volume = volume)
nvidia["AD"] = ad.acc_dist_index()

adx = ta.trend.ADXIndicator(high=high, low = low, close = close, window = 14)
nvidia["ADX"] = adx.adx()

macd = ta.trend.MACD(close = close)
nvidia["MACD"] = macd.macd()
nvidia["MACD Signal"] = macd.macd_signal()
nvidia["MACD Diff"] = macd.macd_diff()

rsi = ta.momentum.RSIIndicator(close = close, window = 14)
nvidia["RSI"] = rsi.rsi()

stoch = ta.momentum.StochasticOscillator(high = high, low = low,
                                         close = close, window = 14,
                                         smooth_window = 3)
nvidia["Stoch K"] = stoch.stoch()
nvidia["Stoch D"] = stoch.stoch_signal()

nvidia = nvidia.replace([np.inf, -np.inf], np.nan)
nvidia = nvidia.dropna()

# adding google search trend to the nvidia dataset

search = pd.read_csv('search.csv', skiprows = 2)
search['Week'] = pd.to_datetime(search['Week'])

start_date = search['Week'].min()
end_date = search['Week'].max()
all_dates = pd.date_range(start=start_date, end = end_date, freq = 'D')

search_all = pd.DataFrame({'Week': all_dates})
search_all = pd.merge(search_all, search, on = 'Week', how = 'left')
search_all.fillna(method = 'ffill', inplace = True)

nvidia_reset = nvidia.reset_index()
nvidia_reset.columns = ['_'.join(col).strip() for col in nvidia_reset.columns]

nvidia_new = pd.merge(search_all, nvidia_reset, left_on = 'Week',
                      right_on = 'Date_', how = 'left')

nvidia_new = nvidia_new.dropna(subset = ['Date_'])
nvidia_new.drop(columns = ['Week'], inplace = True)
nvidia_new.rename(columns = {'nvidia: (United States)': 'Search'},
                  inplace = True)
nvidia_new.columns = [col.split('_')[0] for col in nvidia_new.columns]

nvidia_new.index = pd.to_datetime(nvidia.index)

"""SMA model (Baseline)"""

nvidia_new['SMA'] = nvidia_new['Close'].rolling(window = 5).mean()

plt.figure(figsize = (10, 4))
plt.plot(nvidia_new.index, nvidia_new['Close'], label = 'Actual')
plt.plot(nvidia_new.index, nvidia_new['SMA'], label = 'Forecast', color = 'red')
plt.legend()
plt.title('SMA model (baseline)')
plt.xlabel('Date')
plt.ylabel('Price')
plt.show()

"""cross val with sma"""

sma_mse = []
sma_mae = []

for train_index, test_index in TimeSeriesSplit(n_splits = 10).split(nvidia_new):
    train, test = nvidia.iloc[train_index], nvidia.iloc[test_index]

    train_sma = train['Close'].rolling(window=5).mean().dropna()

    predictions = train_sma[-len(test):]
    predictions.index = test.index[-len(predictions):]

    test = test.iloc[-len(predictions):]

    mse = mean_squared_error(test['Close'], predictions)
    mae = mean_absolute_error(test['Close'], predictions)

    sma_mse.append(mse)
    sma_mae.append(mae)

print(f"Mean Absolute Error:", np.mean(sma_mae))
print(f"Mean Squared Error:", np.mean(sma_mse))

"""ARIMA with Historical data"""

close_prices = nvidia_new['Close']
training_size = int(len(close_prices) * 0.8)

train = close_prices[:training_size]
test = close_prices[training_size:]

train_arima = nvidia_new[['Open', 'High', 'Low', 'Volume']].iloc[:training_size]
test_arima = nvidia_new[['Open', 'High', 'Low', 'Volume']].iloc[training_size:]

model_arima = ARIMA(train, order=(5, 1, 0), exog = train_arima)
model_arima_fit = model_arima.fit()

forecast = model_arima_fit.forecast(steps = len(test), exog = test_arima)

plt.figure(figsize = (10, 4))
plt.plot(train, label = 'Training Data')
plt.plot(test.index, test, label = 'Actual', color = 'blue')
plt.plot(test.index, forecast, label = 'Forecast', color = 'red')
plt.legend()
plt.xlabel('Date')
plt.ylabel('Stock Price')
plt.title('ARIMA Model with Historical Data')
plt.show()

"""Cross Validation testing for ARIMA with historical data"""

arima_mae = []
arima_mse = []

crossval_var = nvidia_new[['Open', 'High', 'Low', 'Volume']].loc[close_prices.index]

for i, j in TimeSeriesSplit(n_splits = 10).split(close_prices):
    train = close_prices.iloc[i]
    test = close_prices.iloc[j]

    train2 = crossval_var.iloc[i]
    test2 = crossval_var.iloc[j]

    crossval = ARIMA(train, order = (5, 1, 0), exog = train2)
    crossval_fit = crossval.fit()

    forecast = crossval_fit.forecast(steps = len(test), exog = test2)

    mae = mean_absolute_error(test, forecast)
    mse = mean_squared_error(test, forecast)

    arima_mae.append(mae)
    arima_mse.append(mse)

print(f"Mean Absolute Error:", np.mean(arima_mae))
print(f"Mean Squared Error:", np.mean(arima_mse))

"""ARIMA with Historical data and market sentiment"""

train = close_prices[:training_size]
test = close_prices[training_size:]

var = nvidia_new[['Open', 'High', 'Low', 'Volume', 'OBV', 'AD', 'ADX', 'MACD',
                  'MACD Signal', 'MACD Diff', 'RSI', 'Stoch K', 'Stoch D',
                  'Search']]

train_arimahm = var.iloc[:training_size]
test_arimahm = var.iloc[training_size:]

model_arimahm = ARIMA(train, order=(5, 1, 0), exog = train_arimahm)
model_arimahm_fit = model_arimahm.fit()

forecast = model_arimahm_fit.forecast(steps=len(test), exog = test_arimahm)

plt.figure(figsize = (10, 4))
plt.plot(train, label = 'Training Data')
plt.plot(test.index, test, label = 'Actual', color = 'blue')
plt.plot(test.index, forecast, label = 'Forecast', color = 'red')
plt.legend()
plt.xlabel('Date')
plt.ylabel('Stock Price')
plt.title('ARIMA Model with Historical and Market Sentiment Data')
plt.show()

"""Cross Val testing for ARIMA WITH market sentiment"""

arimahm_mae = []
arimahm_mse = []

crossval_var = nvidia_new[['Open', 'High', 'Low', 'Volume', 'OBV', 'AD', 'ADX',
                       'MACD', 'MACD Signal', 'MACD Diff', 'RSI', 'Stoch K',
                       'Stoch D', 'Search']].loc[close_prices.index]

for i, j in TimeSeriesSplit(n_splits = 10).split(close_prices):
    train = close_prices.iloc[i]
    test = close_prices.iloc[j]

    train2 = crossval_var.iloc[i]
    test2 = crossval_var.iloc[j]

    crossval = ARIMA(train, order = (5, 1, 0), exog = train2)
    crossval_fit = crossval.fit()

    forecast = crossval_fit.forecast(steps = len(test), exog = test2)

    mae = mean_absolute_error(test, forecast)
    mse = mean_squared_error(test, forecast)

    arimahm_mae.append(mae)
    arimahm_mse.append(mse)

print(f"Mean Absolute Error:", np.mean(arimahm_mae))
print(f"Mean Squared Error:", np.mean(arimahm_mse))

"""SVM with Historical data"""

train = close_prices[:training_size]
test = close_prices[training_size:]

train_arima = nvidia_new[['Open', 'High', 'Low', 'Volume']].iloc[:training_size]
test_arima = nvidia_new[['Open', 'High', 'Low', 'Volume']].iloc[training_size:]

model_svm = SVR(kernel='rbf')
model_svm_fit = model_svm.fit(train_arima, train)

forecast = model_svm_fit.predict(test_arima)

plt.figure(figsize = (10, 4))
plt.plot(train.index, train, label = 'Training Data')
plt.plot(test.index, test, label = 'Actual', color = 'blue')
plt.plot(test.index, forecast, label = 'Forecast', color = 'red')
plt.legend()
plt.xlabel('Date')
plt.ylabel('Stock Price')
plt.title('SVM Model with Historical Data')
plt.show()

"""Cross Val testing for SVM with Historical Data"""

svm_mae = []
svm_mse = []

crossval_var = nvidia_new[['Open', 'High', 'Low', 'Volume']].loc[close_prices.index]

for i, j in TimeSeriesSplit(n_splits = 10).split(close_prices):
    train = close_prices.iloc[i]
    test = close_prices.iloc[j]

    train2 = crossval_var.iloc[i]
    test2 = crossval_var.iloc[j]

    model_svm.fit(train2, train)

    forecast = model_svm.predict(test2)

    mae = mean_absolute_error(test, forecast)
    mse = mean_squared_error(test, forecast)

    svm_mae.append(mae)
    svm_mse.append(mse)

print(f"Mean Absolute Error:", np.mean(svm_mae))
print(f"Mean Squared Error:", np.mean(svm_mse))

"""SVM with Historical data and market sentiment"""

train = close_prices[:training_size]
test = close_prices[training_size:]

var = nvidia_new[['Open', 'High', 'Low', 'Volume', 'OBV', 'AD', 'ADX', 'MACD',
              'MACD Signal', 'MACD Diff', 'RSI', 'Stoch K', 'Stoch D', 'Search']]

train_arimahm = var.iloc[:training_size]
test_arimahm = var.iloc[training_size:]

svm_model = SVR(kernel='rbf')

svm_model.fit(train_arimahm, train)

forecast = svm_model.predict(test_arimahm)

plt.figure(figsize = (10, 4))
plt.plot(train.index, train, label = 'Training Data')
plt.plot(test.index, test, label = 'Actual', color = 'blue')
plt.plot(test.index, forecast, label = 'Forecast', color = 'red')
plt.legend()
plt.xlabel('Date')
plt.ylabel('Stock Price')
plt.title('SVM Model with Historical and Market Sentiment Data')
plt.show()

"""Cross Val testing for ARIMA WITH market sentiment"""

svmhm_mae = []
svmhm_mse = []

crossval_var = nvidia_new[['Open', 'High', 'Low', 'Volume', 'OBV', 'AD', 'ADX',
                       'MACD', 'MACD Signal', 'MACD Diff', 'RSI', 'Stoch K',
                       'Stoch D', 'Search']].loc[close_prices.index]

for i, j in TimeSeriesSplit(n_splits = 10).split(close_prices):
    train = close_prices.iloc[i]
    test = close_prices.iloc[j]

    train2 = crossval_var.iloc[i]
    test2 = crossval_var.iloc[j]

    svm_model.fit(train2, train)

    forecast = svm_model.predict(test2)

    mae = mean_absolute_error(test, forecast)
    mse = mean_squared_error(test, forecast)

    svmhm_mae.append(mae)
    svmhm_mse.append(mse)

print(f"Mean Absolute Error:", np.mean(svmhm_mae))
print(f"Mean Squared Error:", np.mean(svmhm_mse))

"""2024 december prediction"""

nvidia = yf.download('NVDA', start = '2023-01-01', end = '2024-11-30',
                     interval = "1d")
nvidia.index = pd.to_datetime(nvidia.index).strftime('%Y-%m-%d')
nvidia = nvidia.dropna()

close = nvidia["Close"].squeeze()
high = nvidia["High"].squeeze()
low = nvidia["Low"].squeeze()
volume = nvidia["Volume"].squeeze()

nvidia = nvidia.replace([np.inf, -np.inf], np.nan)
nvidia = nvidia.dropna()

close_prices = nvidia['Close']

train = close_prices
var = nvidia[['Open', 'High', 'Low', 'Volume']]

model = ARIMA(train, order = (5, 1, 0), exog = var)
model_fit = model.fit()

predicting_dates = 20
last_values = var.iloc[-1].values
future_exog = np.tile(last_values, (predicting_dates, 1))

forecast = model_fit.forecast(steps = predicting_dates, exog = future_exog)
prediction = pd.date_range(start = pd.to_datetime(train.index[-1]),
                               periods = predicting_dates + 1, freq = 'B')[1:]

plt.figure(figsize = (10, 4))
plt.plot(pd.to_datetime(train.index), train, label = 'Training Data')
plt.plot(prediction, forecast, label = 'Forecasted Prices', color = 'red')
plt.legend()
plt.title('ARIMA Model with Historical Variables Forecast for December 2024')
plt.xlabel('Date')
plt.ylabel('Stock Price')
plt.show()

prediction = pd.DataFrame({
    'Date': prediction, 'Forecasting': forecast
  })
print(prediction)